/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject1;

import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import org.bson.types.ObjectId;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;


/**
 *
 * @author apple
 */


public class CompetitionGUI extends javax.swing.JFrame {

    /**
     * Creates new form Competition
     */
    database db = database.getInstance() ;
    Competition competition ;
    String Username;
    String role ;
    public CompetitionGUI(Competition comp , String username ,String rolee) {
        competition = comp ;
        Username = username ;
        role = rolee;
        initComponents();
        LeaderboardinitComponents();
        comp.leaderBoard = new CompetitionLeaderBoard();
        if(MainRunner.comparestring("Participant", rolee))
        {
             comp.leaderBoard.AddUser(username, 0);//!fbggggggggggg
            //  db.updateUserPoints(comp.Competitionid, username);
             db.insertuserinthecompleaderboard(comp.Competitionid,Username);
        }
        // for(int i = 0 ; i < comp.Participants.size())
        // comp.leaderBoard.AddUser(username, 0);
        // db.updatePoints(username);
        GetCompLeaderBoardfromdb();
        setVisible(true);
    }

    private JTable pointsTable;
    DefaultTableModel tableModel;

        private void LeaderboardinitComponents() {
        // ... (existing code)
        
        tableModel = new DefaultTableModel(new Object[]{"No.", "Username", "Points"}, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Set all cells to be uneditable
            }
        };


        // Create the JTable using the model
        pointsTable = new JTable(tableModel);
    
        // Add numbering to the row
        pointsTable.getColumnModel().getColumn(0).setHeaderValue("No."); // Set the header for the numbering column
    
        // Create a scroll pane for the table
        JScrollPane tableScrollPane = new JScrollPane(pointsTable);
        tableScrollPane.setPreferredSize(new Dimension(200, 200));
    
        // Add the scroll pane to jScrollPane2
        jScrollPane1.setViewportView(tableScrollPane);
        // GetLeaderBoardfromdb();
    

    }

    void updatePointsTable() {
        // Example of updating the table with data
        DefaultTableModel tableModel = (DefaultTableModel) pointsTable.getModel();
        tableModel.addRow(new Object[]{Username, 100}); // Replace 100 with the actual points value
        // Add more rows as needed

        // Refresh the UI
        tableModel.fireTableDataChanged();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel1.setHorizontalAlignment(JLabel.CENTER);
        jLabel2 = new javax.swing.JLabel();
        jLabel1.setHorizontalAlignment(JLabel.CENTER);
        jLabel3 = new javax.swing.JLabel();
        jLabel1.setHorizontalAlignment(JLabel.CENTER);
        jLabel4 = new javax.swing.JLabel();
        jLabel1.setHorizontalAlignment(JLabel.CENTER);
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
      
        JPanel questionsPanel = new JPanel();
        questionsPanel.setLayout(new BoxLayout(questionsPanel, BoxLayout.Y_AXIS));

        // Create three question panels
        for (int i = 1; i < competition.quiz.Questioncount+1; i++) {
            questionsPanel.add(createQuestionPanel(i));
            questionsPanel.add(Box.createRigidArea(new Dimension(0, 10))); // Add some spacing between questions
        }

        // Add the questions panel to a JScrollPane
        // JScrollPane jScrollPane = new JScrollPane(questionsPanel);
          jScrollPane2 = new javax.swing.JScrollPane(questionsPanel);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFont(new java.awt.Font("Chalkboard SE", 0, 18)); // NOI18N
        setForeground(new java.awt.Color(153, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 102));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Kannada MN", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        // jLabel1.setText("1:00:00 am");
        jLabel1.setOpaque(true);
        // JLabel timeLabel = new JLabel();
        // timeLabel.setBackground(new Color(0, 0, 0));
        // timeLabel.setFont(new Font("Kannada MN", 0, 24));
        // timeLabel.setForeground(new Color(255, 255, 255));
        // timeLabel.setText("1:00:00 am");
        // timeLabel.setOpaque(true);

        // JFrame frame = new JFrame();
        add(jLabel1);
        

        TimeUpdater timeUpdater = new TimeUpdater(jLabel1);
        timeUpdater.start();

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Myanmar MN", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText(competition.CreatedByUsername);
        jLabel2.setOpaque(true);

        jLabel3.setBackground(new java.awt.Color(102, 255, 204));
        jLabel3.setFont(new java.awt.Font("Herculanum", 1, 48)); // NOI18N
        jLabel3.setText(competition.NameofCompetition);
        jLabel3.setOpaque(true);

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        int partcount = 0; 
        if(competition.Participants != null)
        {
            partcount = competition.Participants.size() ;
        }
        jLabel4.setText("Total Participants : " + partcount );
        jLabel4.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(154, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        jScrollPane2.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
                

        // Set up layout using BorderLayout
        // setLayout(new BorderLayout());
        // add(jScrollPane, BorderLayout.CENTER);

        // jScrollPane2.setLayout(new FlowLayout());

        // // Assuming you have a list of questions and their sample outputs
        // String[] questions = {"Question 1:", "Question 2:", "Question 3:"};
        // String[] sampleOutputs = {"Sample Output 1:", "Sample Output 2:", "Sample Output 3:"};

     

        // frame.add(containerPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    void GetCompLeaderBoardfromdb()
    {
        competition.leaderBoard = db.getAllPoints(competition.Competitionid);
        tableModel.setRowCount(0);

         for(int i = 0 ; i < competition.leaderBoard.points.size() ; i++)
         {
            tableModel.addRow(new Object[]{tableModel.getRowCount() + 1, competition.leaderBoard.points.get(i).Username, competition.leaderBoard.points.get(i).points});
         }
    }

    private JPanel createQuestionPanel(int questionNumber) {
        // Create a JPanel for a single question
        JPanel questionPanel = new JPanel();
        questionPanel.setLayout(new BorderLayout());


        // Add question statement and sample output
        JLabel questionStatement = new JLabel("Question " + questionNumber + competition.quiz.Questions[questionNumber-1].QuestionStatement);

        JLabel sampleOutput = new JLabel("Output : " + competition.quiz.Questions[questionNumber-1].QuestionStatement);

        // Create a JTextField and a JButton for solution upload
        JTextField solutionTextField = new JTextField();
        JButton uploadButton = new JButton("Upload Solution");
        if(MainRunner.comparestring(role,"Host"))
        {
            solutionTextField.setEnabled(false);
            uploadButton.setText("View Solutions");
            uploadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Handle the solution upload here
                String solution = solutionTextField.getText();
                // Implement your solution upload logic
                System.out.println(" solutions for Question " + questionNumber );
            }
        });

        }
        else
        {
            // uploadButton.addActionListener(new java.awt.event.ActionListener() {
            //     public void actionPerformed(java.awt.event.ActionEvent evt) {
            //         uploadButtonActionPerformed(evt);
            //     }
            // });
            uploadButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Handle the solution upload here
                    String solution = solutionTextField.getText();
                    if(competition.quiz.Questions[questionNumber-1].AnswerPracticeQuestion(solution))
                    {
                          db.updateUserPoints(competition.Competitionid, Username);
                          uploadButtonActionPerformed(true);
                        // JOptionPane.showMessageDialog(this, " Wrong Password!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    {
                         uploadButtonActionPerformed(false);
                    }
                        //  db.updateUserPoints(competition.Competitionid, Username);
                    uploadButton.setEnabled(false);
                    // Implement your solution upload logic
                    System.out.println("Uploaded solution for Question " + questionNumber + ": " + solution);
                }
            });
            
        }

        // Add components to the question panel
        if (competition.quiz.Questions[questionNumber-1].QuestionType== false) {
            JButton pasteButton = new JButton("Paste");
            pasteButton.addActionListener(e -> pasteText(solutionTextField));
            questionPanel.add(pasteButton, BorderLayout.WEST);
        }
        questionPanel.add(questionStatement, BorderLayout.NORTH);
        questionPanel.add(sampleOutput, BorderLayout.EAST);
        questionPanel.add(solutionTextField, BorderLayout.CENTER);
        questionPanel.add(uploadButton, BorderLayout.SOUTH);

        return questionPanel;
    }
    void uploadButtonActionPerformed(boolean dialog)
    {
        if(dialog == true)
        {
            JOptionPane.showMessageDialog(null, " Correct Answer ", "Correct Answer", JOptionPane.DEFAULT_OPTION);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Wrong Answer", "Error", JOptionPane.ERROR_MESSAGE);         
        }
    }

    
private void pasteText(JTextField answerTextField) {
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    Transferable contents = clipboard.getContents(this);

    if (contents != null && contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        try {
            String pastedText = (String) contents.getTransferData(DataFlavor.stringFlavor);
            answerTextField.paste(); // This pastes the text into the JTextField
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


 class TimeUpdater {

    private JLabel timeLabel;
    int i = 0 ;

    public TimeUpdater(JLabel timeLabel) {
        this.timeLabel = timeLabel;
    }

    public void start() {
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                        //   System.out.println("xxxxxx");
             i++;

                if(i % 10 == 0 )
                {
                    
                    GetCompLeaderBoardfromdb();
                }
                SimpleDateFormat timeFormat = new SimpleDateFormat("hh:mm:ss a");
                String currentTime = timeFormat.format(new Date());
                timeLabel.setText(currentTime);
            }
        });

           timer.setRepeats(true);
     
        timer.start();
       
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}




class Competition
{
    public ObjectId Competitionid ;
    public String CreatedByUsername ;
    public String NameofCompetition ;
    public List<String> Participants ;
    public String date ;
    public String Startingtime ;
    public String Duration ;
    public Quiz quiz ;
    boolean EvaluationType ;  // true for Automatic false for manual
    CompetitionLeaderBoard leaderBoard ;


    public Competition() {
        Competitionid = new ObjectId();
        quiz = new Quiz();
    }

    public Competition(String createdByUsername, String nameOfCompetition, List<String> participants,
                       String date, String startingTime, String duration, boolean evaluationType , int QuestionCount) {
        this.CreatedByUsername = createdByUsername;
        this.NameofCompetition = nameOfCompetition;
        this.Participants = participants;
        this.date = date;
        this.Startingtime = startingTime;
        this.Duration = duration;
        this.EvaluationType = evaluationType;
        quiz = new Quiz(QuestionCount);
    }
    public void AddQuestioninCompetition(CompetitionQuestion Q)
    {
        quiz.AddQuestion(Q);
    }

    public Object getDate() {
        return date;
    }

    public Object getStartingtime() {
        return Startingtime;
    }

    public Object getDuration() {
        return Duration;
    }

    public Object isEvaluationType() {
        return EvaluationType;
    }

    public Object getQuiz() {
        return quiz;
    }
    public boolean hasStarted() {
        LocalDate currentDate = LocalDate.now();
        LocalTime currentTime = LocalTime.now();
        System.out.println("checked");
        // Parse competition date, starting time, and duration
        LocalDate competitionDate = LocalDate.parse(date, DateTimeFormatter.ISO_DATE);
        LocalTime competitionStartTime = LocalTime.parse(Startingtime, DateTimeFormatter.ofPattern("HH:mm:ss"));
        if (currentDate.isEqual(competitionDate)) {
           System.out.println(competitionDate);
            // Calculate competition end time
            long hours = Long.parseLong(Duration.substring(0, 2));
            long minutes = Long.parseLong(Duration.substring(3, 5));
            long seconds = Long.parseLong(Duration.substring(6));

            LocalTime competitionEndTime = competitionStartTime.plusHours(hours)
                                                               .plusMinutes(minutes)
                                                               .plusSeconds(seconds);

            // Check if the current time is after the competition start time and before the end time
            return currentTime.isAfter(competitionStartTime) && currentTime.isBefore(competitionEndTime);
        }


        return false;
    }
    public boolean hasEnded() {
    LocalDate currentDate = LocalDate.now();
    LocalTime currentTime = LocalTime.now();

    // Parse competition date, starting time, and duration
    LocalDate competitionDate = LocalDate.parse(date, DateTimeFormatter.ISO_DATE);
    LocalTime competitionStartTime = LocalTime.parse(Startingtime, DateTimeFormatter.ofPattern("HH:mm:ss"));

    // Check if the competition date is in the past
    if(currentDate.isAfter(competitionDate))
        return true ;
    if ((currentDate.isEqual(competitionDate) && currentTime.isAfter(competitionStartTime))) {
        // Calculate competition end time directly without creating Duration
        LocalTime competitionEndTime = competitionStartTime
                .plusHours(Long.parseLong(Duration.substring(0, 2)))
                .plusMinutes(Long.parseLong(Duration.substring(3, 5)))
                .plusSeconds(Long.parseLong(Duration.substring(6)));

        // Check if the current time is after the competition end time
        return currentTime.isAfter(competitionEndTime);
    }

    return false;
}

    
    public void addParticipant(String username) {
        if(Participants == null)
            Participants = new ArrayList<>();
        Participants.add(username);
    }

    public Object getCompetitionId() {
        return Competitionid;
    }
}




class Quiz 
{
    public int Questioncount ;
    int idx ;
    public CompetitionQuestion[] Questions;

    public Quiz()
    {
        Questioncount = 1 ;
        Questions = new CompetitionQuestion[Questioncount];
    }
    public Quiz(int count)
    {
        Questioncount = count ;
        Questions = new CompetitionQuestion[Questioncount];
    }
    public void AddQuestion(CompetitionQuestion Question)
    {
        if(idx < Questioncount)
           Questions[idx++] = Question ;
    }

}

